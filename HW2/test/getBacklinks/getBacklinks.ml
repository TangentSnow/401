open Alcotest
open Pagerank

let g1 =
  [
    ("n2", "n0");
    ("n1", "n4");
    ("n4", "n0");
    ("n1", "n3");
    ("n2", "n1");
    ("n0", "n1");
    ("n3", "n4");
    ("n0", "n4");
    ("n4", "n1");
    ("n4", "n2");
    ("n1", "n0");
  ]

let g2 =
  [
    ("n8", "n4");
    ("n17", "n4");
    ("n15", "n11");
    ("n0", "n18");
    ("n3", "n3");
    ("n17", "n5");
    ("n4", "n6");
    ("n6", "n10");
    ("n10", "n7");
    ("n5", "n0");
    ("n4", "n13");
    ("n16", "n2");
    ("n11", "n15");
    ("n4", "n19");
    ("n6", "n0");
    ("n10", "n16");
    ("n1", "n15");
    ("n0", "n3");
    ("n17", "n18");
    ("n11", "n1");
    ("n0", "n8");
    ("n9", "n3");
    ("n12", "n16");
    ("n2", "n0");
    ("n7", "n0");
    ("n5", "n18");
    ("n19", "n6");
    ("n8", "n10");
    ("n6", "n9");
    ("n12", "n19");
    ("n17", "n1");
    ("n2", "n13");
    ("n18", "n18");
    ("n2", "n15");
    ("n12", "n6");
    ("n7", "n10");
    ("n8", "n11");
    ("n12", "n13");
    ("n8", "n7");
    ("n3", "n19");
    ("n11", "n11");
    ("n3", "n8");
    ("n18", "n3");
    ("n16", "n7");
    ("n16", "n9");
    ("n0", "n10");
    ("n15", "n6");
    ("n17", "n7");
    ("n13", "n14");
    ("n3", "n5");
    ("n11", "n6");
    ("n18", "n16");
    ("n6", "n13");
    ("n1", "n13");
    ("n8", "n2");
    ("n9", "n18");
    ("n7", "n1");
    ("n11", "n17");
    ("n14", "n11");
    ("n7", "n5");
    ("n6", "n16");
    ("n10", "n13");
    ("n13", "n0");
    ("n3", "n15");
    ("n5", "n10");
    ("n0", "n12");
    ("n7", "n16");
    ("n14", "n7");
    ("n19", "n5");
    ("n5", "n11");
    ("n0", "n11");
    ("n17", "n9");
    ("n18", "n12");
    ("n19", "n1");
    ("n13", "n17");
    ("n9", "n2");
    ("n13", "n3");
    ("n18", "n11");
    ("n8", "n13");
    ("n1", "n2");
    ("n8", "n9");
    ("n2", "n4");
    ("n3", "n1");
    ("n13", "n8");
    ("n8", "n6");
    ("n16", "n10");
    ("n16", "n5");
    ("n16", "n8");
    ("n9", "n13");
    ("n16", "n1");
    ("n17", "n0");
    ("n7", "n11");
    ("n3", "n14");
    ("n2", "n19");
    ("n19", "n17");
    ("n0", "n9");
    ("n15", "n17");
    ("n12", "n0");
    ("n7", "n9");
    ("n9", "n16");
    ("n7", "n7");
    ("n14", "n4");
    ("n18", "n7");
    ("n16", "n3");
    ("n11", "n0");
    ("n15", "n19");
    ("n18", "n10");
    ("n6", "n19");
    ("n19", "n2");
    ("n19", "n19");
    ("n5", "n13");
    ("n9", "n8");
    ("n15", "n0");
    ("n15", "n1");
    ("n13", "n5");
    ("n0", "n13");
    ("n19", "n12");
    ("n16", "n15");
    ("n6", "n17");
    ("n0", "n6");
    ("n1", "n10");
    ("n2", "n3");
    ("n5", "n17");
    ("n14", "n8");
    ("n13", "n4");
    ("n12", "n11");
    ("n12", "n14");
    ("n1", "n12");
    ("n3", "n13");
    ("n15", "n9");
    ("n19", "n0");
    ("n18", "n17");
    ("n7", "n6");
    ("n13", "n7");
    ("n15", "n2");
    ("n19", "n13");
    ("n2", "n17");
    ("n11", "n12");
    ("n7", "n13");
    ("n13", "n16");
    ("n18", "n0");
    ("n15", "n14");
    ("n8", "n5");
    ("n18", "n14");
    ("n14", "n15");
    ("n14", "n10");
    ("n8", "n1");
    ("n10", "n14");
    ("n5", "n5");
    ("n13", "n18");
    ("n12", "n9");
    ("n13", "n6");
    ("n5", "n1");
    ("n9", "n17");
    ("n10", "n15");
    ("n11", "n16");
    ("n8", "n17");
    ("n2", "n16");
    ("n15", "n16");
    ("n6", "n8");
    ("n19", "n8");
    ("n15", "n3");
    ("n0", "n5");
    ("n9", "n11");
    ("n4", "n3");
    ("n1", "n16");
    ("n12", "n15");
    ("n14", "n12");
    ("n7", "n19");
    ("n6", "n15");
    ("n14", "n9");
    ("n17", "n2");
    ("n2", "n5");
    ("n16", "n4");
    ("n13", "n2");
    ("n1", "n14");
    ("n19", "n16");
    ("n18", "n15");
    ("n16", "n0");
    ("n13", "n9");
    ("n6", "n4");
    ("n15", "n10");
    ("n10", "n3");
    ("n15", "n5");
    ("n14", "n14");
    ("n6", "n5");
    ("n5", "n4");
    ("n19", "n10");
    ("n6", "n1");
    ("n19", "n18");
    ("n10", "n9");
    ("n4", "n4");
    ("n9", "n6");
    ("n3", "n4");
    ("n6", "n3");
    ("n11", "n18");
    ("n10", "n0");
    ("n17", "n19");
    ("n11", "n9");
    ("n17", "n13");
    ("n17", "n14");
    ("n2", "n14");
    ("n3", "n16");
    ("n4", "n10");
    ("n4", "n5");
    ("n11", "n19");
    ("n0", "n4");
    ("n8", "n14");
    ("n16", "n18");
    ("n15", "n18");
    ("n11", "n13");
    ("n7", "n15");
    ("n1", "n18");
    ("n4", "n1");
    ("n8", "n0");
    ("n3", "n7");
    ("n4", "n2");
    ("n9", "n5");
    ("n16", "n13");
    ("n17", "n16");
    ("n15", "n4");
    ("n9", "n0");
    ("n11", "n7");
    ("n9", "n1");
    ("n2", "n2");
    ("n8", "n8");
    ("n12", "n1");
    ("n0", "n2");
    ("n15", "n7");
    ("n4", "n17");
    ("n2", "n9");
    ("n1", "n7");
    ("n17", "n3");
    ("n16", "n6");
    ("n4", "n12");
    ("n2", "n12");
    ("n3", "n18");
    ("n17", "n6");
    ("n5", "n6");
    ("n7", "n18");
    ("n14", "n0");
    ("n14", "n1");
    ("n10", "n1");
    ("n5", "n15");
    ("n0", "n14");
    ("n10", "n5");
    ("n10", "n10");
    ("n1", "n0");
    ("n1", "n1");
    ("n4", "n11");
    ("n12", "n4");
    ("n3", "n11");
    ("n14", "n5");
    ("n3", "n2");
    ("n1", "n8");
    ("n12", "n12");
  ]

let sorted_set s = PageSet.elements s |> List.sort compare

let expected_backlinks =
  [
    ("n0", [ "n1"; "n2"; "n4" ]);
    ("n1", [ "n0"; "n2"; "n4" ]);
    ("n2", [ "n4" ]);
    ("n3", [ "n1" ]);
    ("n4", [ "n0"; "n1"; "n3" ]);
  ]

let test_get_backlinks_1 () =
  List.iter
    (fun (node, expected) ->
      let actual = sorted_set (Pagerank.getBacklinks g1 node) in
      check (list string) ("Backlinks for " ^ node) expected actual)
    expected_backlinks

let test_get_backlinks_2 () =
  let check_backlinks node expected =
    let backlinks =
      getBacklinks g2 node |> PageSet.elements |> List.sort compare
    in
    check (list string) ("Backlinks for " ^ node) expected backlinks
  in
  check_backlinks "n0"
    [
      "n1";
      "n10";
      "n11";
      "n12";
      "n13";
      "n14";
      "n15";
      "n16";
      "n17";
      "n18";
      "n19";
      "n2";
      "n5";
      "n6";
      "n7";
      "n8";
      "n9";
    ];
  check_backlinks "n1"
    [
      "n1";
      "n10";
      "n11";
      "n12";
      "n14";
      "n15";
      "n16";
      "n17";
      "n19";
      "n3";
      "n4";
      "n5";
      "n6";
      "n7";
      "n8";
      "n9";
    ];
  check_backlinks "n2"
    [
      "n0";
      "n1";
      "n13";
      "n15";
      "n16";
      "n17";
      "n19";
      "n2";
      "n3";
      "n4";
      "n8";
      "n9";
    ];
  check_backlinks "n3"
    [
      "n0";
      "n10";
      "n13";
      "n15";
      "n16";
      "n17";
      "n18";
      "n2";
      "n3";
      "n4";
      "n6";
      "n9";
    ];
  check_backlinks "n4"
    [
      "n0";
      "n12";
      "n13";
      "n14";
      "n15";
      "n16";
      "n17";
      "n2";
      "n3";
      "n4";
      "n5";
      "n6";
      "n8";
    ];
  check_backlinks "n5"
    [
      "n0";
      "n10";
      "n13";
      "n14";
      "n15";
      "n16";
      "n17";
      "n19";
      "n2";
      "n3";
      "n4";
      "n5";
      "n6";
      "n7";
      "n8";
      "n9";
    ];
  check_backlinks "n6"
    [
      "n0";
      "n11";
      "n12";
      "n13";
      "n15";
      "n16";
      "n17";
      "n19";
      "n4";
      "n5";
      "n7";
      "n8";
      "n9";
    ];
  check_backlinks "n7"
    [
      "n1";
      "n10";
      "n11";
      "n13";
      "n14";
      "n15";
      "n16";
      "n17";
      "n18";
      "n3";
      "n7";
      "n8";
    ];
  check_backlinks "n8"
    [ "n0"; "n1"; "n13"; "n14"; "n16"; "n19"; "n3"; "n6"; "n8"; "n9" ];
  check_backlinks "n9"
    [
      "n0";
      "n10";
      "n11";
      "n12";
      "n13";
      "n14";
      "n15";
      "n16";
      "n17";
      "n2";
      "n6";
      "n7";
      "n8";
    ]

let () =
  run "getBacklinks Tests"
    [
      ( "getBacklinks_1",
        [ test_case "Check backlinks for g1" `Quick test_get_backlinks_1 ] );
      ( "getBacklinks_2",
        [ test_case "Check backlinks for g2" `Quick test_get_backlinks_2 ] );
    ]
